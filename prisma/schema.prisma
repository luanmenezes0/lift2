datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Post {
  slug     String @id
  title    String
  markdown String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id                 Int            @id @default(autoincrement())
  name               String
  address            String
  phoneNumber        String?
  isLegalEntity      Boolean        @default(false)
  registrationNumber String?        @unique
  buildingSites      BuildingSite[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model BuildingSite {
  id      Int    @id @default(autoincrement())
  name    String
  address String

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  deliveries     Delivery[]
  inventories    Inventory[]
  deliveriesUnit DeliveryUnit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery {
  id             Int            @id @default(autoincrement())
  buildingSite   BuildingSite   @relation(fields: [buildingSiteId], references: [id])
  buildingSiteId Int
  units          DeliveryUnit[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model DeliveryUnit {
  id             Int          @id @default(autoincrement())
  count          Int
  deliveryType   Int
  rentable       Rentable     @relation(fields: [rentableId], references: [id])
  rentableId     Int
  Delivery       Delivery?    @relation(fields: [deliveryId], references: [id])
  deliveryId     Int?
  buildingSite   BuildingSite @relation(fields: [buildingSiteId], references: [id])
  buildingSiteId Int
  date           DateTime?    @default("2022-12-31T00:00:00+03:00")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Rentable {
  id            Int            @id @default(autoincrement())
  name          String
  count         Int            @default(0)
  inventories   Inventory[]
  deliveryUnits DeliveryUnit[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Inventory {
  id    Int @id @default(autoincrement())
  count Int

  buildingSite   BuildingSite @relation(fields: [buildingSiteId], references: [id])
  buildingSiteId Int

  rentable   Rentable @relation(fields: [rentableId], references: [id])
  rentableId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
